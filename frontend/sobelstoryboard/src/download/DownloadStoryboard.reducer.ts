import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import {AppThunk, RootState} from "../app/store";
import {ProduceZipInput, produceZipPy } from "./DownloadStoryboardAPI";
import {AppThunk} from "../app/store";

export interface DownloadStoryboardState {

    currentlyDownloading: boolean;
    retriesRemaining: number;


    // regular items
    url: string | null; // Url to download zip file from
    numProcessed: number; // Number received if a 'currently_has' response returns
    numExpected: number; // Number expected from the 'push to fountain' url.
    error: string | null;
    updateSuccess: boolean;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: DownloadStoryboardState = {

    currentlyDownloading: false,
    retriesRemaining: 10,

    // regular items
    url: null,
    numProcessed: 0,
    numExpected: 0,
    error: null,
    updateSuccess: false,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const produceZipUrl = createAsyncThunk(
    'downloadStoryboard/produceZipUrl',
    async ({folder, expected, zipFileName}: ProduceZipInput) => {
        const response = await produceZipPy(folder, expected, zipFileName);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const downloadStoryboardSlice = createSlice({
    name: 'downloadStoryboard',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        reset: (state) => {
            return initialState;
        },
        beginDownload: (state) => {
            state.currentlyDownloading = true;
        }
        // increment: (state) => {
        //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //     // doesn't actually mutate the state because it uses the Immer library,
        //     // which detects changes to a "draft state" and produces a brand new
        //     // immutable state based off those changes
        //     state.value += 1;
        // },
        // decrement: (state) => {
        //     state.value -= 1;
        // },
        // // Use the PayloadAction type to declare the contents of `action.payload`
        // incrementByAmount: (state, action: PayloadAction<number>) => {
        //     state.value += action.payload;
        // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(produceZipUrl.pending, (state) => {
                state.currentlyDownloading = true;
                state.status = 'loading';
                state.updateSuccess = false;
                state.url = null;
                state.error = null;
            })
            .addCase(produceZipUrl.fulfilled, (state, action) => {
                state.status = 'idle';
                const pp = action.payload;
                state.numExpected = action.meta.arg.expected;
                if ('download_from' in pp) {
                    console.timeEnd('start_download_phase');
                    state.url = pp['download_from'];
                    state.numExpected = 0;
                    state.numProcessed = 0;
                    state.updateSuccess = true;
                    state.currentlyDownloading = false;
                } else if ('currently_has' in pp) {
                    state.currentlyDownloading = true;
                    state.numProcessed = pp.currently_has;
                }
            })
            .addCase(produceZipUrl.rejected, (state, action) => {
                state.numExpected = 0;
                state.numProcessed = 0;
                state.url = null;
                state.error = action?.error?.message ?? null;
                state.updateSuccess = false;
                state.currentlyDownloading = false;
                state.status = 'failed';
            });
    },
});

export const { reset, beginDownload } = downloadStoryboardSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.downloadStoryboard.value)`
// export const selectCount = (state: RootState) => state.downloadStoryboard.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };

// export const waitAndThenDispatch =
//     (p: ProduceZipInput): AppThunk =>
//         (dispatch, getState) => {
//             const canContinue = getState().downloadStoryboard.retriesRemaining > 0
//                 && ;
//
//         };

export default downloadStoryboardSlice.reducer;