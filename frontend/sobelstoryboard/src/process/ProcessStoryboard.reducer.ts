import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import {AppThunk, RootState} from "../app/store";
import {pushFountainPy} from "./ProcessStoryboardAPI";
import {beginDownload} from "../download/DownloadStoryboard.reducer";


export interface PushFountainState {
    // value: number;
    numExpected: number; // Number expected from the 'push to fountain' url.
    error: string | null;
    updateSuccess: boolean;
    uniqueNumber: string | null;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: PushFountainState = {
    // value: 0,
    numExpected: 0,
    error: null,
    updateSuccess: false,
    uniqueNumber: null,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const pushFountainUrl = createAsyncThunk(
    'pushFountain/pushFountainUrl',
    async (f: string, thunkAPI) => {
        const response = await pushFountainPy(f);
        thunkAPI.dispatch(beginDownload());
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const pushFountainSlice = createSlice({
    name: 'pushFountain',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        reset: (state) => {
            return initialState;
        }
        // increment: (state) => {
        //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
        //     // doesn't actually mutate the state because it uses the Immer library,
        //     // which detects changes to a "draft state" and produces a brand new
        //     // immutable state based off those changes
        //     state.value += 1;
        // },
        // decrement: (state) => {
        //     state.value -= 1;
        // },
        // // Use the PayloadAction type to declare the contents of `action.payload`
        // incrementByAmount: (state, action: PayloadAction<number>) => {
        //     state.value += action.payload;
        // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(pushFountainUrl.pending, (state) => {
                state.status = 'loading';
                state.updateSuccess = false;
                state.uniqueNumber = null;
                state.numExpected = 0;
                state.error = null;
            })
            .addCase(pushFountainUrl.fulfilled, (state, action) => {
                state.status = 'idle';
                const pp = action.payload;
                state.numExpected = pp.number_of_lines;
                state.uniqueNumber = pp.unique_number;
                state.updateSuccess = true;
            })
            .addCase(pushFountainUrl.rejected, (state, action) => {
                state.numExpected = 0;
                state.uniqueNumber = null;
                state.error = action?.error?.message ?? null;
                state.updateSuccess = false;
                state.status = 'failed';
            });
    },
});

export const { reset } = pushFountainSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.pushFountain.value)`
// export const selectCount = (state: RootState) => state.pushFountain.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };

export default pushFountainSlice.reducer;